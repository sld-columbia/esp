#ifndef __FIXED
// input 2x6x6
in[0] = (native_t) 0;
in[1] = (native_t) 1;
in[2] = (native_t) 2;
in[3] = (native_t) 3;
in[4] = (native_t) 4;
in[5] = (native_t) 5;
in[6] = (native_t) 6;
in[7] = (native_t) 7;
in[8] = (native_t) 0;
in[9] = (native_t) 1;
in[10] = (native_t) 2;
in[11] = (native_t) 3;
in[12] = (native_t) 4;
in[13] = (native_t) 5;
in[14] = (native_t) 6;
in[15] = (native_t) 7;
in[16] = (native_t) 0;
in[17] = (native_t) 1;
in[18] = (native_t) 2;
in[19] = (native_t) 3;
in[20] = (native_t) 4;
in[21] = (native_t) 5;
in[22] = (native_t) 6;
in[23] = (native_t) 7;
in[24] = (native_t) 0;
in[25] = (native_t) 1;
in[26] = (native_t) 2;
in[27] = (native_t) 3;
in[28] = (native_t) 4;
in[29] = (native_t) 5;
in[30] = (native_t) 6;
in[31] = (native_t) 7;
in[32] = (native_t) 0;
in[33] = (native_t) 1;
in[34] = (native_t) 2;
in[35] = (native_t) 3;
in[36] = (native_t) 4;
in[37] = (native_t) 5;
in[38] = (native_t) 6;
in[39] = (native_t) 7;
in[40] = (native_t) 0;
in[41] = (native_t) 1;
in[42] = (native_t) 2;
in[43] = (native_t) 3;
in[44] = (native_t) 4;
in[45] = (native_t) 5;
in[46] = (native_t) 6;
in[47] = (native_t) 7;
in[48] = (native_t) 0;
in[49] = (native_t) 1;
in[50] = (native_t) 2;
in[51] = (native_t) 3;
in[52] = (native_t) 4;
in[53] = (native_t) 5;
in[54] = (native_t) 6;
in[55] = (native_t) 7;
in[56] = (native_t) 0;
in[57] = (native_t) 1;
in[58] = (native_t) 2;
in[59] = (native_t) 3;
in[60] = (native_t) 4;
in[61] = (native_t) 5;
in[62] = (native_t) 6;
in[63] = (native_t) 7;
in[64] = (native_t) 0;
in[65] = (native_t) 1;
in[66] = (native_t) 2;
in[67] = (native_t) 3;
in[68] = (native_t) 4;
in[69] = (native_t) 5;
in[70] = (native_t) 6;
in[71] = (native_t) 7;

// weights 2x2x3x3
in[72] = (native_t) 0.594184;
in[73] = (native_t) 0.477919;
in[74] = (native_t) 0.978544;
in[75] = (native_t) 0.194331;
in[76] = (native_t) 0.579522;
in[77] = (native_t) 0.015637;
in[78] = (native_t) 0.894881;
in[79] = (native_t) 0.505898;
in[80] = (native_t) 0.442344;
in[81] = (native_t) 0.795308;
in[82] = (native_t) 0.959499;
in[83] = (native_t) 0.845903;
in[84] = (native_t) 0.0113338;
in[85] = (native_t) 0.781664;
in[86] = (native_t) 0.36783;
in[87] = (native_t) 0.381876;
in[88] = (native_t) 0.138025;
in[89] = (native_t) 0.185136;
in[90] = (native_t) 0.845644;
in[91] = (native_t) 0.326279;
in[92] = (native_t) 0.946868;
in[93] = (native_t) 0.133039;
in[94] = (native_t) 0.267401;
in[95] = (native_t) 0.409488;
in[96] = (native_t) 0.467174;
in[97] = (native_t) 0.962629;
in[98] = (native_t) 0.61841;
in[99] = (native_t) 0.418975;
in[100] = (native_t) 0.373705;
in[101] = (native_t) 0.0665198;
in[102] = (native_t) 0.684322;
in[103] = (native_t) 0.967888;
in[104] = (native_t) 0.544438;
in[105] = (native_t) 0.662866;
in[106] = (native_t) 0.162219;
in[107] = (native_t) 0.12396;

// biases 2
in[108] = (native_t) 0;
in[109] = (native_t) 0;

#else

// input 2x6x6
in[0] = float2fx(0, FX_IL);
in[1] = float2fx(1, FX_IL);
in[2] = float2fx(2, FX_IL);
in[3] = float2fx(3, FX_IL);
in[4] = float2fx(4, FX_IL);
in[5] = float2fx(5, FX_IL);
in[6] = float2fx(6, FX_IL);
in[7] = float2fx(7, FX_IL);
in[8] = float2fx(0, FX_IL);
in[9] = float2fx(1, FX_IL);
in[10] = float2fx(2, FX_IL);
in[11] = float2fx(3, FX_IL);
in[12] = float2fx(4, FX_IL);
in[13] = float2fx(5, FX_IL);
in[14] = float2fx(6, FX_IL);
in[15] = float2fx(7, FX_IL);
in[16] = float2fx(0, FX_IL);
in[17] = float2fx(1, FX_IL);
in[18] = float2fx(2, FX_IL);
in[19] = float2fx(3, FX_IL);
in[20] = float2fx(4, FX_IL);
in[21] = float2fx(5, FX_IL);
in[22] = float2fx(6, FX_IL);
in[23] = float2fx(7, FX_IL);
in[24] = float2fx(0, FX_IL);
in[25] = float2fx(1, FX_IL);
in[26] = float2fx(2, FX_IL);
in[27] = float2fx(3, FX_IL);
in[28] = float2fx(4, FX_IL);
in[29] = float2fx(5, FX_IL);
in[30] = float2fx(6, FX_IL);
in[31] = float2fx(7, FX_IL);
in[32] = float2fx(0, FX_IL);
in[33] = float2fx(1, FX_IL);
in[34] = float2fx(2, FX_IL);
in[35] = float2fx(3, FX_IL);
in[36] = float2fx(4, FX_IL);
in[37] = float2fx(5, FX_IL);
in[38] = float2fx(6, FX_IL);
in[39] = float2fx(7, FX_IL);
in[40] = float2fx(0, FX_IL);
in[41] = float2fx(1, FX_IL);
in[42] = float2fx(2, FX_IL);
in[43] = float2fx(3, FX_IL);
in[44] = float2fx(4, FX_IL);
in[45] = float2fx(5, FX_IL);
in[46] = float2fx(6, FX_IL);
in[47] = float2fx(7, FX_IL);
in[48] = float2fx(0, FX_IL);
in[49] = float2fx(1, FX_IL);
in[50] = float2fx(2, FX_IL);
in[51] = float2fx(3, FX_IL);
in[52] = float2fx(4, FX_IL);
in[53] = float2fx(5, FX_IL);
in[54] = float2fx(6, FX_IL);
in[55] = float2fx(7, FX_IL);
in[56] = float2fx(0, FX_IL);
in[57] = float2fx(1, FX_IL);
in[58] = float2fx(2, FX_IL);
in[59] = float2fx(3, FX_IL);
in[60] = float2fx(4, FX_IL);
in[61] = float2fx(5, FX_IL);
in[62] = float2fx(6, FX_IL);
in[63] = float2fx(7, FX_IL);
in[64] = float2fx(0, FX_IL);
in[65] = float2fx(1, FX_IL);
in[66] = float2fx(2, FX_IL);
in[67] = float2fx(3, FX_IL);
in[68] = float2fx(4, FX_IL);
in[69] = float2fx(5, FX_IL);
in[70] = float2fx(6, FX_IL);
in[71] = float2fx(7, FX_IL);

// weights 2x2x3x3
in[72] = float2fx(0.594184, FX_IL);
in[73] = float2fx(0.477919, FX_IL);
in[74] = float2fx(0.978544, FX_IL);
in[75] = float2fx(0.194331, FX_IL);
in[76] = float2fx(0.579522, FX_IL);
in[77] = float2fx(0.015637, FX_IL);
in[78] = float2fx(0.894881, FX_IL);
in[79] = float2fx(0.505898, FX_IL);
in[80] = float2fx(0.442344, FX_IL);
in[81] = float2fx(0.795308, FX_IL);
in[82] = float2fx(0.959499, FX_IL);
in[83] = float2fx(0.845903, FX_IL);
in[84] = float2fx(0.0113338, FX_IL);
in[85] = float2fx(0.781664, FX_IL);
in[86] = float2fx(0.36783, FX_IL);
in[87] = float2fx(0.381876, FX_IL);
in[88] = float2fx(0.138025, FX_IL);
in[89] = float2fx(0.185136, FX_IL);
in[90] = float2fx(0.845644, FX_IL);
in[91] = float2fx(0.326279, FX_IL);
in[92] = float2fx(0.946868, FX_IL);
in[93] = float2fx(0.133039, FX_IL);
in[94] = float2fx(0.267401, FX_IL);
in[95] = float2fx(0.409488, FX_IL);
in[96] = float2fx(0.467174, FX_IL);
in[97] = float2fx(0.962629, FX_IL);
in[98] = float2fx(0.61841, FX_IL);
in[99] = float2fx(0.418975, FX_IL);
in[100] = float2fx(0.373705, FX_IL);
in[101] = float2fx(0.0665198, FX_IL);
in[102] = float2fx(0.684322, FX_IL);
in[103] = float2fx(0.967888, FX_IL);
in[104] = float2fx(0.544438, FX_IL);
in[105] = float2fx(0.662866, FX_IL);
in[106] = float2fx(0.162219, FX_IL);
in[107] = float2fx(0.12396, FX_IL);

// biases 2
in[108] = float2fx(0, FX_IL);
in[109] = float2fx(0, FX_IL);

#endif
